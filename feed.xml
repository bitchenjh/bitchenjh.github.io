<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>陈建辉区块链博客</title>
    <description>陈建辉，项目经理，高级软件工程师，早期区块链从业人员，拥有多年传统金融软件开发经验</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 02 Jun 2018 13:32:25 +0800</pubDate>
    <lastBuildDate>Sat, 02 Jun 2018 13:32:25 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>ethereum源码分析(一)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者：陈建辉&lt;/p&gt;

  &lt;p&gt;博客：www.chenjianhui.org&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：如有错误，请指正，不断更新迭代&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一-下载源码&quot;&gt;一. 下载源码&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/ethereum/go-ethereum&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;命令执行成功之后，代码就会下载到下面这个目录，%GOPATH%\src\github.com\ethereum\go-ethereum&lt;/p&gt;

&lt;h3 id=&quot;二-go-ethereum-目录大概介绍&quot;&gt;二. go ethereum 目录大概介绍&lt;/h3&gt;

&lt;p&gt;go-ethereum项目的组织结构基本上是按照功能模块划分的目录，下面简单介绍一下各个目录的结构，每个目录在GO语言里面又被成为一个Package&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;accounts  实现了一个高等级的以太坊账户管理
bmt			二进制的默克尔树的实现
build			主要是编译和构建的一些脚本和配置
cmd			命令行工具，又分了很多的命令行工具，下面一个一个介绍
	/abigen		Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages
	/bootnode	启动一个仅仅实现网络发现的节点
	/evm		以太坊虚拟机的开发工具， 用来提供一个可配置的，受隔离的代码调试环境
	/faucet		
	/geth		以太坊命令行客户端，最重要的一个工具
	/p2psim		提供了一个工具来模拟http的API
	/puppeth	创建一个新的以太坊网络的向导
	/rlpdump 	提供了一个RLP数据的格式化输出
	/swarm		swarm网络的接入点
	/util		提供了一些公共的工具
	/wnode		这是一个简单的Whisper节点。 它可以用作独立的引导节点。此外，可以用于不同的测试和诊断目的。
common			提供了一些公共的工具类
compression		Package rle implements the run-length encoding used for Ethereum data.
consensus		提供了以太坊的一些共识算法，比如ethhash, clique(proof-of-authority)
console			console类
contracts
core			以太坊的核心数据结构和算法(虚拟机，状态，区块链，布隆过滤器)
crypto			加密和hash算法，
eth			实现了以太坊的协议
ethclient		提供了以太坊的RPC客户端
ethdb			eth的数据库(包括实际使用的leveldb和供测试使用的内存数据库)
ethstats		提供网络状态的报告
event			处理实时的事件
les			实现了以太坊的轻量级协议子集
light			实现为以太坊轻量级客户端提供按需检索的功能
log			提供对人机都友好的日志信息
metrics			提供磁盘计数器
miner			提供以太坊的区块创建和挖矿
mobile			移动端使用的一些warpper
node			以太坊的多种类型的节点
p2p			以太坊p2p网络协议
rlp			以太坊序列化处理
rpc			远程方法调用
swarm			swarm网络处理
tests			测试
trie			以太坊重要的数据结构Package trie implements Merkle Patricia Tries.
whisper			提供了whisper节点的协议。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;接下去，我会选一些重点模块，比如rpc,p2p,miner等重点来学习，抓大放小，方便大家抓住核心，整体了解之后然后深入了解，循序渐进。&lt;/p&gt;
</description>
        <pubDate>Fri, 25 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/25/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97(%E4%B8%80)/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/25/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97(%E4%B8%80)/</guid>
        
        <category>go-ethereum</category>
        
        
      </item>
    
      <item>
        <title>搭建以太坊私有链(多节点)</title>
        <description>&lt;p&gt;layout: post
title: “搭建以太坊私有链(多节点)”
date: 2018-05-18
description: “搭建以太坊私有链(多节点)”
tag: 以太坊多节点私有链搭建
keywords: “go-ethereum,私有链，多节点，集群”
—&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者：陈建辉&lt;/p&gt;

  &lt;p&gt;博客：www.chenjianhui.org&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：如有错误，请指正，不断更新迭代&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;搭建以太坊私有链多节点&quot;&gt;搭建以太坊私有链(多节点)&lt;/h1&gt;

&lt;p&gt;上一篇博客我们了解了使用geth搭建以太坊私有网络,这一次则要在私有网络中建立多个node组成的集群,并互相发现,产生交易.&lt;/p&gt;

&lt;p&gt;为了在本地网络运行多个以太坊节点的实例,必须确保一下几点:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;每个实例都有独立的数据目录(–datadir)&lt;/li&gt;
  &lt;li&gt;每个实例运行都有独立的端口.(eth和rpc两者都是)(–port 和 –rpcprot)&lt;/li&gt;
  &lt;li&gt;在集群的情况下, 实例之间都必须要知道彼此.&lt;/li&gt;
  &lt;li&gt;唯一的ipc通信端点,或者禁用ipc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过上一篇博客，我们产生了一个节点，相关数据在data0中。今天为了演示，我们另外新建两个目录data1,data2,分别代表另外两个节点，本地的目录结构如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- data0
|   |-- geth
|   |   |-- LOCK
|   |   |-- chaindata
|   |   |-- lightchaindata
|   |   |-- nodekey
|   |   |-- nodes
|   |   `-- transactions.rlp
|   |-- history
|   `-- keystore
|       |-- UTC--2018-05-30T08-06-12.333261000Z
|       `-- UTC--2018-05-30T08-06-30.067324000Z
|-- data1
|   |-- geth
|   |   |-- LOCK
|   |   |-- chaindata
|   |   |-- ethash
|   |   |-- lightchaindata
|   |   |-- nodekey
|   |   |-- nodes
|   |   `-- transactions.rlp
|   `-- keystore
|-- data2
|   |-- geth
|   |   |-- LOCK
|   |   |-- chaindata
|   |   |-- ethash
|   |   |-- lightchaindata
|   |   |-- nodekey
|   |   |-- nodes
|   |   `-- transactions.rlp
|   `-- keystore
`-- genesis.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;启动第一个节点指定端口并禁用ipc&quot;&gt;启动第一个节点(指定端口,并禁用ipc)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;geth --datadir data0 --networkid 314590 --ipcdisable --port 61910 --rpcport 8200 console&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;控制台输出：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CjhMacPro:privatechain chenjh$ geth --datadir data0 --networkid 314590 --ipcdisable --port 61910 --rpcport 8200 console

INFO [05-30|17:41:52] Starting peer-to-peer node               instance=Geth/v1.8.0-unstable-7138de7b/darwin-amd64/go1.9.2

INFO [05-30|17:41:52] Allocated cache and file handles         database=/Users/chenjh/privatechain/data0/geth/chaindata cache=128 handles=1024

INFO [05-30|17:41:52] Initialised chain configuration          config=&quot;{ChainID: 10 Homestead: 0 DAO: &amp;lt;nil&amp;gt; DAOSupport: false EIP150: &amp;lt;nil&amp;gt; EIP155: 0 EIP158: 0 Byzantium: &amp;lt;nil&amp;gt; Engine: unknown}&quot;

INFO [05-30|17:41:52] Disk storage enabled for ethash caches   dir=/Users/chenjh/privatechain/data0/geth/ethash count=3

INFO [05-30|17:41:52] Disk storage enabled for ethash DAGs     dir=/Users/chenjh/.ethash                        count=2

INFO [05-30|17:41:52] Initialising Ethereum protocol           versions=&quot;[63 62]&quot; network=314590

INFO [05-30|17:41:52] Loaded most recent local header          number=155 hash=1327ab…ddd9e2 td=21205924

INFO [05-30|17:41:52] Loaded most recent local full block      number=155 hash=1327ab…ddd9e2 td=21205924

INFO [05-30|17:41:52] Loaded most recent local fast block      number=155 hash=1327ab…ddd9e2 td=21205924

INFO [05-30|17:41:52] Loaded local transaction journal         transactions=0 dropped=0

INFO [05-30|17:41:52] Regenerated local transaction journal    transactions=0 accounts=0

WARN [05-30|17:41:52] Blockchain not empty, fast sync disabled

INFO [05-30|17:41:52] Starting P2P networking

INFO [05-30|17:41:52] UDP listener up                          self=enode://d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e@10.0.154.153:61910

INFO [05-30|17:41:52] RLPx listener up                         self=enode://d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e@10.0.154.153:61910

Welcome to the Geth JavaScript console!

instance: Geth/v1.8.0-unstable-7138de7b/darwin-amd64/go1.9.2

INFO [05-30|17:41:52] Etherbase automatically configured       address=0x66035B6F180224CE2095ba162eBBD83173d6b574

coinbase: 0x66035b6f180224ce2095ba162ebbd83173d6b574

at block: 155 (Wed, 30 May 2018 16:22:40 CST)

 datadir: /Users/chenjh/privatechain/data0

 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的命令以命令行的(console)的方式启动了节点, 所以我们可以通过继续输入下面的命令获取节点实例的enode url&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;admin.nodeInfo.enode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;控制台输出：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; admin.nodeInfo.enode
&quot;enode://d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e@10.0.154.153:61910&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其他信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.accounts

[&quot;0x66035b6f180224ce2095ba162ebbd83173d6b574&quot;, &quot;0x04e34feefd824e65dd55e863b4ddda02a12fa505&quot;]

&amp;gt; admin.nodeInfo.enode

&quot;enode://d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e@10.0.154.153:61910&quot;

&amp;gt; net.peerCount

1

&amp;gt; admin.peers

[]

&amp;gt; personal.unlockAccount(eth.accounts[0])

Unlock account 0x66035b6f180224ce2095ba162ebbd83173d6b574

Passphrase:

true

&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[0]),'ether')

649.999622

&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[1]),'ether')

125.000378

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;启动第二个节点指定端口并禁用ipc&quot;&gt;启动第二个节点(指定端口,并禁用ipc)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;geth --datadir data1  init genesis.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;geth --datadir data1 --networkid 314590 --ipcdisable --port 61911 --rpcport 8101 --bootnodes &quot;enode://d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e@10.0.154.153:61910&quot; console&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;控制台输出：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CjhMacPro:privatechain chenjh$ geth --datadir data1  init genesis.json

INFO [05-30|17:47:53] Allocated cache and file handles         database=/Users/chenjh/privatechain/data1/geth/chaindata cache=16 handles=16

INFO [05-30|17:47:53] Successfully wrote genesis state         database=chaindata                                       hash=5e1fc7…d790e0

INFO [05-30|17:47:53] Allocated cache and file handles         database=/Users/chenjh/privatechain/data1/geth/lightchaindata cache=16 handles=16

INFO [05-30|17:47:53] Successfully wrote genesis state         database=lightchaindata                                       hash=5e1fc7…d790e0

CjhMacPro:privatechain chenjh$ geth --datadir data1 --networkid 314590 --ipcdisable --port 61911 --rpcport 8101 --bootnodes &quot;enode://d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e@10.0.154.153:61910&quot; console

INFO [05-30|17:48:07] Starting peer-to-peer node               instance=Geth/v1.8.0-unstable-7138de7b/darwin-amd64/go1.9.2

INFO [05-30|17:48:07] Allocated cache and file handles         database=/Users/chenjh/privatechain/data1/geth/chaindata cache=128 handles=1024

INFO [05-30|17:48:07] Initialised chain configuration          config=&quot;{ChainID: 10 Homestead: 0 DAO: &amp;lt;nil&amp;gt; DAOSupport: false EIP150: &amp;lt;nil&amp;gt; EIP155: 0 EIP158: 0 Byzantium: &amp;lt;nil&amp;gt; Engine: unknown}&quot;

INFO [05-30|17:48:07] Disk storage enabled for ethash caches   dir=/Users/chenjh/privatechain/data1/geth/ethash count=3

INFO [05-30|17:48:07] Disk storage enabled for ethash DAGs     dir=/Users/chenjh/.ethash                        count=2

INFO [05-30|17:48:07] Initialising Ethereum protocol           versions=&quot;[63 62]&quot; network=314590

INFO [05-30|17:48:07] Loaded most recent local header          number=155 hash=1327ab…ddd9e2 td=21205924

INFO [05-30|17:48:07] Loaded most recent local full block      number=155 hash=1327ab…ddd9e2 td=21205924

INFO [05-30|17:48:07] Loaded most recent local fast block      number=155 hash=1327ab…ddd9e2 td=21205924

INFO [05-30|17:48:07] Loaded local transaction journal         transactions=0 dropped=0

INFO [05-30|17:48:07] Regenerated local transaction journal    transactions=0 accounts=0

WARN [05-30|17:48:07] Blockchain not empty, fast sync disabled

INFO [05-30|17:48:07] Starting P2P networking

INFO [05-30|17:48:07] UDP listener up                          self=enode://eaa5ff26d4aa243d8bae4eb455d7da151bdd900ffd8652273f28e758032090b08058de01a832898a78922bf0f6cc4a86754abc62b4948682464324d89ae66c3a@10.0.154.153:61911

INFO [05-30|17:48:07] RLPx listener up                         self=enode://eaa5ff26d4aa243d8bae4eb455d7da151bdd900ffd8652273f28e758032090b08058de01a832898a78922bf0f6cc4a86754abc62b4948682464324d89ae66c3a@10.0.154.153:61911

Welcome to the Geth JavaScript console!

instance: Geth/v1.8.0-unstable-7138de7b/darwin-amd64/go1.9.2

 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其他信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.accounts

[]

&amp;gt; admin.nodeInfo

{

  enode: &quot;enode://eaa5ff26d4aa243d8bae4eb455d7da151bdd900ffd8652273f28e758032090b08058de01a832898a78922bf0f6cc4a86754abc62b4948682464324d89ae66c3a@10.0.154.153:61911&quot;,

  id: &quot;eaa5ff26d4aa243d8bae4eb455d7da151bdd900ffd8652273f28e758032090b08058de01a832898a78922bf0f6cc4a86754abc62b4948682464324d89ae66c3a&quot;,

  ip: &quot;10.0.154.153&quot;,

  listenAddr: &quot;[::]:61911&quot;,

  name: &quot;Geth/v1.8.0-unstable-7138de7b/darwin-amd64/go1.9.2&quot;,

  ports: {

    discovery: 61911,

    listener: 61911

  },

  protocols: {

    eth: {

      difficulty: 21205924,

      genesis: &quot;0x5e1fc79cb4ffa4739177b5408045cd5d51c6cf766133f23f7cd72ee1f8d790e0&quot;,

      head: &quot;0x1327ab7c58e655cf0b80d769d697017976e190fe91e3a4c525081034a1ddd9e2&quot;,

      network: 314590

    }

  }

}

&amp;gt; net.peerCount

2

&amp;gt; admin.peers

[{

    caps: [&quot;eth/62&quot;, &quot;eth/63&quot;],

    id: &quot;d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e&quot;,

    name: &quot;Geth/v1.8.0-unstable-7138de7b/darwin-amd64/go1.9.2&quot;,

    network: {

      localAddress: &quot;10.0.154.153:51063&quot;,

      remoteAddress: &quot;10.0.154.153:61910&quot;

    },

    protocols: {

      eth: {

        difficulty: 21205924,

        head: &quot;0x1327ab7c58e655cf0b80d769d697017976e190fe91e3a4c525081034a1ddd9e2&quot;,

        version: 63

      }

    }

}]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;启动第三个节点指定端口并禁用ipc&quot;&gt;启动第三个节点(指定端口,并禁用ipc)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;geth --datadir data2  init genesis.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;geth --datadir data2 --networkid 314590 --ipcdisable --port 61912 --rpcport 8122 --bootnodes &quot;enode://d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e@10.0.154.153:61910&quot; console&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;控制台输出：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CjhMacPro:privatechain chenjh$ geth --datadir data2  init genesis.json

INFO [05-30|17:51:26] Allocated cache and file handles         database=/Users/chenjh/privatechain/data2/geth/chaindata cache=16 handles=16

INFO [05-30|17:51:26] Successfully wrote genesis state         database=chaindata                                       hash=5e1fc7…d790e0

INFO [05-30|17:51:26] Allocated cache and file handles         database=/Users/chenjh/privatechain/data2/geth/lightchaindata cache=16 handles=16

INFO [05-30|17:51:26] Successfully wrote genesis state         database=lightchaindata                                       hash=5e1fc7…d790e0

CjhMacPro:privatechain chenjh$ geth --datadir data2 --networkid 314590 --ipcdisable --port 61912 --rpcport 8122 --bootnodes &quot;enode://d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e@10.0.154.153:61910&quot; console

INFO [05-30|17:51:40] Starting peer-to-peer node               instance=Geth/v1.8.0-unstable-7138de7b/darwin-amd64/go1.9.2

INFO [05-30|17:51:40] Allocated cache and file handles         database=/Users/chenjh/privatechain/data2/geth/chaindata cache=128 handles=1024

INFO [05-30|17:51:40] Initialised chain configuration          config=&quot;{ChainID: 10 Homestead: 0 DAO: &amp;lt;nil&amp;gt; DAOSupport: false EIP150: &amp;lt;nil&amp;gt; EIP155: 0 EIP158: 0 Byzantium: &amp;lt;nil&amp;gt; Engine: unknown}&quot;

INFO [05-30|17:51:40] Disk storage enabled for ethash caches   dir=/Users/chenjh/privatechain/data2/geth/ethash count=3

INFO [05-30|17:51:40] Disk storage enabled for ethash DAGs     dir=/Users/chenjh/.ethash                        count=2

INFO [05-30|17:51:40] Initialising Ethereum protocol           versions=&quot;[63 62]&quot; network=314590

INFO [05-30|17:51:40] Loaded most recent local header          number=155 hash=1327ab…ddd9e2 td=21205924

INFO [05-30|17:51:40] Loaded most recent local full block      number=155 hash=1327ab…ddd9e2 td=21205924

INFO [05-30|17:51:40] Loaded most recent local fast block      number=155 hash=1327ab…ddd9e2 td=21205924

INFO [05-30|17:51:40] Loaded local transaction journal         transactions=0 dropped=0

INFO [05-30|17:51:40] Regenerated local transaction journal    transactions=0 accounts=0

WARN [05-30|17:51:40] Blockchain not empty, fast sync disabled

INFO [05-30|17:51:40] Starting P2P networking

INFO [05-30|17:51:40] UDP listener up                          self=enode://78cf9ddf0c8923818130417fd60bd7e325e1419d5c0f0f27102e352fecc6d118b98203a8abf0ce2204c1da541385325bab74d76e01e318f4af494679d7f2db1d@10.0.154.153:61912

INFO [05-30|17:51:40] RLPx listener up                         self=enode://78cf9ddf0c8923818130417fd60bd7e325e1419d5c0f0f27102e352fecc6d118b98203a8abf0ce2204c1da541385325bab74d76e01e318f4af494679d7f2db1d@10.0.154.153:61912

Welcome to the Geth JavaScript console!

instance: Geth/v1.8.0-unstable-7138de7b/darwin-amd64/go1.9.2

 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其它查询信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.accounts

[]

&amp;gt; net.peerCount

1

&amp;gt; admin.p

admin.peers admin.propertyIsEnumerable

&amp;gt; admin.peers

[{

    caps: [&quot;eth/62&quot;, &quot;eth/63&quot;],

    id: &quot;d8ea1509b8852c7d0e23099fca469551ccdc109e2e4509dd2f741fc480171e25b77f0f6047765743aaafaea71c0a637ed2f117c1977313906f8c436f4bf97a8e&quot;,

    name: &quot;Geth/v1.8.0-unstable-7138de7b/darwin-amd64/go1.9.2&quot;,

    network: {

      localAddress: &quot;10.0.154.153:52250&quot;,

      remoteAddress: &quot;10.0.154.153:61910&quot;

    },

    protocols: {

      eth: {

        difficulty: 21205924,

        head: &quot;0x1327ab7c58e655cf0b80d769d697017976e190fe91e3a4c525081034a1ddd9e2&quot;,

        version: 63

      }

    }

}]

&amp;gt; eth.blockNumber

155

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;钱包之间交易转账&quot;&gt;钱包之间交易转账&lt;/h2&gt;

&lt;p&gt;在第一个节点命令行中,执行下面的操作:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; personal.unlockAccount(eth.accounts[0])

Unlock account 0x66035b6f180224ce2095ba162ebbd83173d6b574

Passphrase:

true

&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[0]),'ether')

649.999622

&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[1]),'ether')

125.000378

&amp;gt; eth.sendTransaction({from: &quot;0x66035b6f180224ce2095ba162ebbd83173d6b574&quot;, to: &quot;0x04e34feefd824e65dd55e863b4ddda02a12fa505&quot;, gas:31000, 'gasPrice': web3.toWei(20, 'gwei'), &quot;value&quot;: &quot;1&quot;})

INFO [05-30|17:59:38] Submitted transaction                    fullhash=0xae61ea9623cf06efedc2a40e61af089550f29cc251a9a6665797f145419241bd recipient=0x04E34fEefD824E65Dd55E863b4ddDA02a12FA505

&quot;0xae61ea9623cf06efedc2a40e61af089550f29cc251a9a6665797f145419241bd&quot;

&amp;gt; txpool.status

{

  pending: 1,

  queued: 0

}

&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[0]),'ether')

649.999622

&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[1]),'ether')

125.000378

&amp;gt; miner.start()

INFO [05-30|18:01:12] Updated mining threads                   threads=0

INFO [05-30|18:01:12] Transaction pool price threshold updated price=18000000000

INFO [05-30|18:01:12] Starting mining operation

INFO [05-30|18:02:01] Commit new mining work                   number=206 txs=0 uncles=0 elapsed=407.553µs

INFO [05-30|18:02:02] Successfully sealed new block            number=206 hash=69f31d…bfd898

INFO [05-30|18:02:02] 🔗 block reached canonical chain          number=201 hash=d576ee…8398a4

INFO [05-30|18:02:02] 🔨 mined potential block                  number=206 hash=69f31d…bfd898

INFO [05-30|18:02:02] Commit new mining work                   number=207 txs=0 uncles=0 elapsed=189.102µs

INFO [05-30|18:02:02] Successfully sealed new block            number=207 hash=8bd575…473072

INFO [05-30|18:02:02] 🔗 block reached canonical chain          number=202 hash=ee475f…bc0189

INFO [05-30|18:02:02] 🔨 mined potential block                  number=207 hash=8bd575…473072

INFO [05-30|18:02:02] Mining too far in the future             wait=2s

&amp;gt; miner.stop()

INFO [05-30|18:02:04] Commit new mining work                   number=208 txs=0 uncles=0 elapsed=2.001s

true

&amp;gt; txpool.status

{

  pending: 0,

  queued: 0

}

&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[1]),'ether')

125.000378000000000001

&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[0]),'ether')

909.999621999999999999

&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 18 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/18/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE(%E5%A4%9A%E8%8A%82%E7%82%B9)/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/18/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE(%E5%A4%9A%E8%8A%82%E7%82%B9)/</guid>
        
        
      </item>
    
      <item>
        <title>搭建以太坊私有链(单节点)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者：陈建辉&lt;/p&gt;

  &lt;p&gt;博客：www.chenjianhui.org&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：如有错误，请指正，不断更新迭代&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;搭建以太坊私有链单节点&quot;&gt;搭建以太坊私有链(单节点)&lt;/h1&gt;

&lt;p&gt;以太坊是一个公有链系统，我们可以通过设置一些参数来运行自己的私有链节点，在自己的私有链上进行开发和测试不需要同步公有链数据，也不需要花钱来买以太币，节省存储空间和成本，而且很灵活很方便。本文介绍使用geth客户端搭建私有链的操作步骤，同时会解释在这个过程中用到的各个命令及选项的含义和作用，最后会介绍geth的Javascript Console中的一些常用功能。&lt;/p&gt;

&lt;h2 id=&quot;源码下载&quot;&gt;源码下载&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/ethereum/go-ethereum.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;编译&quot;&gt;编译&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd go-ethereum
$ make geth
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将 &lt;code class=&quot;highlighter-rouge&quot;&gt;geth&lt;/code&gt; 添加到环境变量中 &lt;code class=&quot;highlighter-rouge&quot;&gt;vi ~/.bashrc&lt;/code&gt;
Mac下也可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;vi ~/.bash_profile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export GETH=&quot;$GOPATH/src/github.com/ethereum/go-ethereum/build&quot;
export PATH=&quot;$PATH:$GETH/bin&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;source ~/.bashrc&lt;/code&gt;，使配置生效。&lt;/p&gt;

&lt;p&gt;检查是否安装成功&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;geth --help
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果输出一些帮助提示命令，则说明安装成功。&lt;/p&gt;

&lt;h2 id=&quot;搭建私有链&quot;&gt;搭建私有链&lt;/h2&gt;

&lt;h3 id=&quot;配置初始状态&quot;&gt;配置初始状态&lt;/h3&gt;

&lt;p&gt;要运行以太坊私有链，需要定义自己的创世区块，创世区块信息写在一个 JSON 格式的配置文件中。首先将下面的内容保存到一个 JSON 文件中，例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;genesis.json&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir ~/privatechain
$ cd privatechain
$ mkdir data0
$ vi genesis.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;genesis.json 的代码&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;chainId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;314590&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;homesteadBlock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eip155Block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eip158Block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;alloc&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;coinbase&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x0000000000000000000000000000000000000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;difficulty&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x20000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extraData&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;gasLimit&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x2fefd8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;nonce&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x0000000000000042&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mixhash&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;parentHash&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x00&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，chainID 指定了独立的区块链网络 ID。网络 ID 在连接到其他节点的时候会用到，以太坊公网的网络 ID 是 1，为了不与公有链网络冲突，运行私有链节点的时候要指定自己的网络 ID。不同 ID 网络的节点无法相互连接。配置文件还对当前挖矿难度 difficulty、区块 Gas 消耗限制 gasLimit 等参数进行了设置。&lt;/p&gt;

&lt;p&gt;其它参数介绍：
mixhash：与nonce配合用于挖矿，由上一个区块的一部分生成的hash。注意他和nonce的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity,
nonce：	nonce就是一个64位随机数，用于挖矿，注意他和mixhash的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity,
difficulty：	设置当前区块的难度，如果难度过大，cpu挖矿就很难，这里设置较小难度
alloc	：用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以。
coinbase：	矿工的账号，随便填
timestamp：设置创世块的时间戳
parentHash：	上一个区块的hash值，因为是创世块，所以这个值是0
extraData	：附加信息，随便填，可以填你的个性信息
gasLimit：	该值设置对GAS的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们是私有链，所以填最大。&lt;/p&gt;

&lt;h3 id=&quot;初始化写入创世区块&quot;&gt;初始化：写入创世区块&lt;/h3&gt;

&lt;p&gt;准备好创世区块配置文件后，需要初始化区块链，将上面的创世区块信息写入到区块链中。首先要新建一个目录用来存放区块链数据，假设新建的数据目录为 ~/privatechain/data0，genesis.json 保存在 ~/privatechain 中，此时目录结构应该是这样的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;privatechain
├── data0
└── genesis.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行初始化命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;geth --datadir data0 init genesis.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的命令的主体是 &lt;code class=&quot;highlighter-rouge&quot;&gt;geth init&lt;/code&gt;，表示初始化区块链，命令可以带有选项和参数，其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;--datadir&lt;/code&gt; 选项后面跟一个目录名，这里为 &lt;code class=&quot;highlighter-rouge&quot;&gt;data0&lt;/code&gt;，表示指定数据存放目录为 &lt;code class=&quot;highlighter-rouge&quot;&gt;data0&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;genesis.json&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; 命令的参数。&lt;/p&gt;

&lt;p&gt;运行上面的命令，会读取 &lt;code class=&quot;highlighter-rouge&quot;&gt;genesis.json&lt;/code&gt; 文件，根据其中的内容，将创世区块写入到区块链中。如果看到以下的输出内容，说明初始化成功了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO [01-29|21:21:13] Maximum peer count                       ETH=25 LES=0 total=25
INFO [01-29|21:21:13] Allocated cache and file handles         database=/Users/fujinliang/privatechain/data0/geth/chaindata cache=16 handles=16
INFO [01-29|21:21:13] Writing custom genesis block
INFO [01-29|21:21:13] Persisted trie from memory database      nodes=0 size=0.00B time=358.89µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
INFO [01-29|21:21:13] Successfully wrote genesis state         database=chaindata                                           hash=5e1fc7…d790e0
INFO [01-29|21:21:13] Allocated cache and file handles         database=/Users/fujinliang/privatechain/data0/geth/lightchaindata cache=16 handles=16
INFO [01-29|21:21:13] Writing custom genesis block
INFO [01-29|21:21:13] Persisted trie from memory database      nodes=0 size=0.00B time=2.633µs  gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
INFO [01-29|21:21:13] Successfully wrote genesis state         database=lightchaindata                                           hash=5e1fc7…d790e0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;初始化成功后，会在数据目录 data0 中生成 geth 和 keystore 两个文件夹，此时目录结构如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;privatechain
├── data0
│   ├── geth
│   │   ├── chaindata
│   │   │   ├── 000001.log
│   │   │   ├── CURRENT
│   │   │   ├── LOCK
│   │   │   ├── LOG
│   │   │   MANIFEST-000000
│   │   └── lightchaindata
│   │       ├── 000001.log
│   │       ├── CURRENT
│   │       ├── LOCK
│   │       ├── LOG
│   │       └── MANIFEST-000000
│   └── keystore
└── genesis.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;geth/chaindata&lt;/code&gt; 中存放的是区块数据，&lt;code class=&quot;highlighter-rouge&quot;&gt;keystore&lt;/code&gt; 中存放的是账户数据。&lt;/p&gt;

&lt;h3 id=&quot;启动私有链节点&quot;&gt;启动私有链节点&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;geth --datadir data0 --networkid 314590 console
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面命令的主体是 &lt;code class=&quot;highlighter-rouge&quot;&gt;geth console&lt;/code&gt;，表示启动节点并进入交互式控制台，–datadir选项指定使用data0作为数据目录，&lt;code class=&quot;highlighter-rouge&quot;&gt;--networkid&lt;/code&gt; 选项后面跟一个数字，这里是110，表示指定这个私有链的网络id为110。网络id在连接到其他节点的时候会用到，以太坊公网的网络id是1，为了不与公有链网络冲突，运行私有链节点的时候要指定自己的网络id。&lt;/p&gt;

&lt;p&gt;运行上面的命令后，就启动了区块链节点并进入了该节点的控制台：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
Welcome to the Geth JavaScript console!

instance: Geth/v1.8.10-unstable-ccc0debb/darwin-amd64/go1.10.2
 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是一个交互式的 JavaScript 执行环境，在这里面可以执行 JavaScript 代码，其中 &amp;gt; 是命令提示符。在这个环境里也内置了一些用来操作以太坊的 JavaScript 对象，可以直接使用这些对象。这些对象主要包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;eth：包含一些跟操作区块链相关的方法；&lt;/li&gt;
  &lt;li&gt;net：包含一些查看p2p网络状态的方法；&lt;/li&gt;
  &lt;li&gt;admin：包含一些与管理节点相关的方法；&lt;/li&gt;
  &lt;li&gt;miner：包含启动&amp;amp;停止挖矿的一些方法；&lt;/li&gt;
  &lt;li&gt;personal：主要包含一些管理账户的方法；&lt;/li&gt;
  &lt;li&gt;txpool：包含一些查看交易内存池的方法；&lt;/li&gt;
  &lt;li&gt;web3：包含了以上对象，还包含一些单位换算的方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;控制台操作&quot;&gt;控制台操作&lt;/h2&gt;

&lt;p&gt;进入以太坊 Javascript Console 后，就可以使用里面的内置对象做一些操作，这些内置对象提供的功能很丰富，比如查看区块和交易、创建账户、挖矿、发送交易、部署智能合约等。&lt;/p&gt;

&lt;p&gt;常用命令有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;personal.newAccount()：创建账户；&lt;/li&gt;
  &lt;li&gt;personal.unlockAccount()：解锁账户；&lt;/li&gt;
  &lt;li&gt;eth.accounts：枚举系统中的账户；&lt;/li&gt;
  &lt;li&gt;eth.getBalance()：查看账户余额，返回值的单位是 Wei（Wei 是以太坊中最小货币面额单位，类似比特币中的聪，1 ether = 10^18 Wei）；&lt;/li&gt;
  &lt;li&gt;eth.blockNumber：列出区块总数；&lt;/li&gt;
  &lt;li&gt;eth.getTransaction()：获取交易；&lt;/li&gt;
  &lt;li&gt;eth.getBlock()：获取区块；&lt;/li&gt;
  &lt;li&gt;miner.start()：开始挖矿；&lt;/li&gt;
  &lt;li&gt;miner.stop()：停止挖矿；&lt;/li&gt;
  &lt;li&gt;eth.coinbase：挖矿奖励的账户&lt;/li&gt;
  &lt;li&gt;web3.fromWei()：Wei 换算成以太币；&lt;/li&gt;
  &lt;li&gt;web3.toWei()：以太币换算成 Wei；&lt;/li&gt;
  &lt;li&gt;txpool.status：交易池中的状态；&lt;/li&gt;
  &lt;li&gt;admin.addPeer()：连接到其他节点；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;创建账户&quot;&gt;创建账户&lt;/h3&gt;

&lt;p&gt;输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;eth.accounts&lt;/code&gt; 查询系统中的账户：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.accounts
[]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示为 &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;，表示没有账户，接下来使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;personal.newAccount()&lt;/code&gt; 来创建一个账户：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; personal.newAccount()
Passphrase:
Repeat passphrase:
&quot;0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Passphrase&lt;/code&gt; 表示输入密码，&lt;code class=&quot;highlighter-rouge&quot;&gt;Repeat passphrase&lt;/code&gt; 表示输入确认密码&lt;/p&gt;

&lt;p&gt;再次创建一个账户&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; personal.newAccount()
Passphrase:
Repeat passphrase:
&quot;0xc6b5702b15a3794374e28f41f36e1e8dbdd564df&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;查看刚刚创建的用户：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.accounts
[&quot;0x66035b6f180224ce2095ba162ebbd83173d6b574&quot;, &quot;0x04e34feefd824e65dd55e863b4ddda02a12fa505&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;账户默认会保存在数据目录的 &lt;code class=&quot;highlighter-rouge&quot;&gt;data0/keystore&lt;/code&gt; 文件夹中。可以查看其中的文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x66035b6f180224ce2095ba162ebbd83173d6b574&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;crypto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cipher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aes-128-ctr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ciphertext&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0efae4f94134172b785f1f635be8e70342bf31e1e0ecad21d672594f09ccf572&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cipherparams&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;iv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;37f4f3fa2cf070b70e3eb668fad6f46f&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;kdf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scrypt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;kdfparams&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dklen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;262144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;salt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1cdd1cf97fb882c3d3e734223668b47c888170e795346e11d0f521a71fe3aa2a&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mac&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;902a29db25a3a35a2568b04b30a8194201f07ab37c96ed1fe9af932fc1d38be0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ecd5beb2-8261-4207-8eff-2fa34678d064&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;查看账户余额&quot;&gt;查看账户余额&lt;/h3&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;eth.getBalance()&lt;/code&gt; 可以查看账户余额&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.getBalance(eth.accounts[0])
0
&amp;gt; eth.getBalance(eth.accounts[1])
0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;目前两个账户的以太币余额都是0，要使账户有余额，可以从其他账户转账过来，或者通过挖矿来获得以太币奖励。&lt;/p&gt;

&lt;h3 id=&quot;启动停止挖矿&quot;&gt;启动&amp;amp;停止挖矿&lt;/h3&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;miner.start()&lt;/code&gt; 启动挖矿&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; miner.start(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中 start 的参数表示挖矿使用的线程数。第一次启动挖矿会先生成挖矿所需的 DAG 文件，这个过程有点慢，等进度达到 100% 后，就会开始挖矿，此时屏幕会被挖矿信息刷屏。&lt;/p&gt;

&lt;p&gt;停止挖矿，在 console 中输入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;miner.stop()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;挖到一个区块会奖励5个以太币，挖矿所得的奖励会进入矿工的账户，这个账户叫做coinbase，默认情况下coinbase是本地账户中的第一个账户：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.coinbase
&quot;0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;miner.setEtherbase()&lt;/code&gt; 将其他账户设置成 &lt;code class=&quot;highlighter-rouge&quot;&gt;coinbase&lt;/code&gt; 即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; miner.setEtherbase(eth.accounts[1])
true
&amp;gt; eth.coinbase
&quot;0xc6b5702b15a3794374e28f41f36e1e8dbdd564df&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重新启动挖矿，查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;eth.accounts[1]&lt;/code&gt; 是否可以获得以太币&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; miner.start(3)

//等待几秒后
&amp;gt; miner.stop()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;查询账户余额：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.getBalance(eth.accounts[0])
280000000000000000000
&amp;gt; eth.getBalance(eth.accounts[1])
210000000000000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;发现账户0 和 账号1 都有以太币，说明 &lt;code class=&quot;highlighter-rouge&quot;&gt;miner.setEtherbase()&lt;/code&gt; 设置成功。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getBalance()&lt;/code&gt; 返回值的单位是wei，wei是以太币的最小单位，1个以太币=10的18次方个wei。要查看有多少个以太币，可以用web3.fromWei()将返回值换算成以太币：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[0]),'ether')
280

&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[1]),'ether')
210
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;发送交易&quot;&gt;发送交易&lt;/h3&gt;

&lt;p&gt;我们从账户0转移10个以太币到账户1,首先要解锁账户 0，才能发起交易：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; personal.unlockAccount(eth.accounts[0])
Unlock account 0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d
Passphrase:
true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;发起交易&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; amount = web3.toWei(10,'ether')
&quot;10000000000000000000&quot;
&amp;gt; eth.sendTransaction({from:eth.accounts[0],to:eth.accounts[1],value:amount})
INFO [05-29|22:37:32] Submitted transaction                    fullhash=0x493e8aa2bcb6b2a362bdbd86b2c454279e14beea43b444aeb45c7f667bf572e2 recipient=0xc6b5702B15a3794374e28f41F36e1E8dBDd564DF
&quot;0x493e8aa2bcb6b2a362bdbd86b2c454279e14beea43b444aeb45c7f667bf572e2&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;查询 账户1 的余额：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[1]),'ether')
210
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;发现账户余额没有发生改变，此时交易已经提交到区块链，但还未被处理，这可以通过用 &lt;code class=&quot;highlighter-rouge&quot;&gt;txpool.status&lt;/code&gt; 命令可以看到本地交易池中有一个待确认的交易：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; txpool.status
{
  pending: 1,
  queued: 0
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中有一条pending的交易，pending表示已提交但还未被处理的交易。&lt;/p&gt;

&lt;p&gt;要使交易被处理，必须要挖矿。这里我们启动挖矿，然后等待挖到一个区块之后就停止挖矿：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;miner.start(1);admin.sleepBlocks(1);miner.stop()
&amp;gt; web3.fromWei(eth.getBalance(eth.accounts[1]),'ether')
225.000378
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;发现账户收到了账户的钱，还多了5个以太币。其实多出的5个以太币是挖矿奖励。&lt;/p&gt;

&lt;h3 id=&quot;查看交易和区块&quot;&gt;查看交易和区块&lt;/h3&gt;

&lt;p&gt;查看当前区块总数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.blockNumber
99
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过区块号查看区块：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; eth.getBlock(6)
{
  difficulty: 131328,
  extraData: &quot;0xd98301080a846765746888676f312e31302e328664617277696e&quot;,
  gasLimit: 3160033,
  gasUsed: 0,
  hash: &quot;0x9679d0dc01045c3d15cbf29241ae1cd6de2e5661d3387c0980f6397e3fd9ed2c&quot;,
  logsBloom: &quot;0xquot;,
  miner: &quot;0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d&quot;,
  mixHash: &quot;0x05c369134eac2cb6227860b4ed11527b11825af3541712c5704914576c37c0a0&quot;,
  nonce: &quot;0x00168a9831624417&quot;,
  number: 6,
  parentHash: &quot;0xad68f0a581cf2144b8a05190b6310c7a9d945d9c338fd16b4708651b8813ad8b&quot;,
  receiptsRoot: &quot;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;,
  sha3Uncles: &quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;,
  size: 537,
  stateRoot: &quot;0xfaa0a4ffe160a2937b967f9780ae0de51a465bcce6a3f6f3aa24b903df3d44a0&quot;,
  timestamp: 1527602736,
  totalDifficulty: 918144,
  transactions: [],
  transactionsRoot: &quot;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;,
  uncles: []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过交易hash（hash 值包含在上面交易返回值中）查看交易：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eth.getTransaction(&quot;0x493e8aa2bcb6b2a362bdbd86b2c454279e14beea43b444aeb45c7f667bf572e2&quot;)
{
  blockHash: &quot;0xbe60f7ccddcb7cab39a7b932c0d89d37ac13ae14521cfdcb8ac359a5b6773655&quot;,
  blockNumber: 99,
  from: &quot;0xfb9cc019fc650a1699d05b7fb564b83c3a72b64d&quot;,
  gas: 90000,
  gasPrice: 18000000000,
  hash: &quot;0x493e8aa2bcb6b2a362bdbd86b2c454279e14beea43b444aeb45c7f667bf572e2&quot;,
  input: &quot;0x&quot;,
  nonce: 0,
  r: &quot;0x8da41e865d399fc4d8f813a39116e486db7658a04ea1f89ca0b7f44c02dd3c57&quot;,
  s: &quot;0x15edd22404460cfc5e86c9735774a02aad024bc8c369ec531e4485f1012cbcf6&quot;,
  to: &quot;0xc6b5702b15a3794374e28f41f36e1e8dbdd564df&quot;,
  transactionIndex: 0,
  v: &quot;0x37&quot;,
  value: 10000000000000000000
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 15 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/15/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE(%E5%8D%95%E8%8A%82%E7%82%B9)/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/15/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE(%E5%8D%95%E8%8A%82%E7%82%B9)/</guid>
        
        <category>以太坊私有链搭建</category>
        
        
      </item>
    
      <item>
        <title>Mac下搭建个人博客</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者：陈建辉&lt;/p&gt;

  &lt;p&gt;博客：www.chenjianhui.org&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：如有错误，请指正，不断更新迭代&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一-前言&quot;&gt;一. 前言&lt;/h3&gt;
&lt;p&gt;最近听大牛指导，觉得非常必要拥有一个属于自己的个人博客。通过写博客，可以对学习进行归纳总结，对经验进行分享，以后是一笔不小的人生财富。回想自己工作多年，要写的东西实在太多，所以心血来潮，自己动手搭建个人博客，本来认为非常容易，花不了多少时间，但是中途还是碰到不少问题，网上资料很多很杂，都不是特别适合自己，而且过程不全面，经过自己不断摸索，不断重装，花了几天时间终于搭建起来了。下面我把自己在Mac上的搭建过程及问题跟大家分享下，希望大家也尽量开启自己的博客之旅。&lt;/p&gt;

&lt;h3 id=&quot;二-架构选型&quot;&gt;二. 架构选型&lt;/h3&gt;

&lt;p&gt;目前所了解到的，受欢迎的博客搭建架构如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Git+Github+Markdown+jekyll （免费）&lt;/li&gt;
  &lt;li&gt;Git+Github+Markdown+hexo （免费）&lt;/li&gt;
  &lt;li&gt;虚拟主机＋插件＋Wordpress （付费）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第1，2免费，第3付费
如果决定花钱，那么选3，省心省力。不过我个人还是介意自己去搭建一个博客，而且作为一个合格程序员，熟悉github网站的使用还是非常必要的。
1，2的话看个人喜好，各有各的优缺点，看你注重哪个，具体的话自己网上了解，资料一堆。
我选择架构1，虽然jekyll麻烦点，但是github默认支持jekyll，可以直接在github网页版上编辑和发布博客，所以也就选他了。&lt;/p&gt;

&lt;h3 id=&quot;三-博客搭建&quot;&gt;三. 博客搭建&lt;/h3&gt;

&lt;h4 id=&quot;1-启动本地博客命令&quot;&gt;1. 启动本地博客命令&lt;/h4&gt;

&lt;p&gt;我们直接运行启动本地博客命令，看看自己环境到底缺啥，直接根据问题去找原因，这样搭建也不会无厘头。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-angular2html&quot;&gt;bunddle exec jekyll server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;理论上输出：
&lt;img src=&quot;http://p96hyfqf4.bkt.clouddn.com/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%91%BD%E4%BB%A4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装过程中可能每个人的环境不同，终端提示问题不同，然后根据提示选择性安装ruby,gem,jekyll,bundler等包，缺什么安装什么，终端都有提示。
参考如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-angular2html&quot;&gt;ruby:brew install ruby

gem:sudo gem install --system

jekyll:sudo gem install jekyll

bundler:sudo gem install bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;2-部署github&quot;&gt;2. 部署github&lt;/h4&gt;

&lt;p&gt;如果没有github的赶紧注册自己的账号，注册之后按照username.github.io创建一个仓库。
这里重点需要讲一下部署keys,方便文件从仓库上传和下载。
settings-&amp;gt;Deploys keys-&amp;gt;add Deploys key&lt;/p&gt;

&lt;p&gt;本地操作&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;获取key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa -C &quot;xxx@163.com&quot;&lt;/code&gt;  &lt;!--替换自己注册邮箱--&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat /Users/chenjh/.ssh/id_rsa.pub &lt;/code&gt; &lt;!--直接把输出的key拷贝到github上--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;clone博客代码文件夹&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/bitchenjh/bitchenjh.github.io.git&lt;/code&gt;  &lt;!--替换成自己的github code 路径--&gt;&lt;/p&gt;

&lt;p&gt;执行之后，本地就出现一个bitchenjh.github.io的文件夹。&lt;/p&gt;

&lt;h4 id=&quot;3-编写博客并且上传github仓库&quot;&gt;3. 编写博客并且上传github仓库&lt;/h4&gt;

&lt;p&gt;本地博客结构如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://p96hyfqf4.bkt.clouddn.com/%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;_posts:存放博客的目录，注意博客命名需要严格按照一定格式：xxxx-xx-xx-xxxx-xxxx.md&lt;/p&gt;

&lt;p&gt;_site:该目录是jekyll编译出来的博客运行文件，修改之后可以直接删除，然后重新编译生成该文件夹。编译完成之后只需要直接将该文件内容
       直接更新到github&lt;/p&gt;

&lt;p&gt;更新博客过程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;将_site删除&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更新博客&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译：bundle exec jekyll serve build&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重新生成_sites,将里面的内容全部拷贝到clone的文件夹：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;执行如下命令：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-angular2html&quot;&gt;cd  bitchenjh.github.io    &amp;lt;!--替换自己的clone目录--&amp;gt;

git add *

git status

git commit -m &quot;init&quot;

git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;4-登入个人博客&quot;&gt;4. 登入个人博客&lt;/h4&gt;

&lt;p&gt;上面操作完成之后，这个时候在浏览器上输入: username.github.io，就可以看见博客了。&lt;/p&gt;

&lt;h3 id=&quot;四-其他&quot;&gt;四. 其他&lt;/h3&gt;

&lt;p&gt;以下内容为扩展，如果让你的博客显得高大尚，可以部署自己的独立域名。同时也可以借助一个平台将博客进行云存储。&lt;/p&gt;

&lt;h4 id=&quot;1-阿里云域名绑定&quot;&gt;1. 阿里云域名绑定&lt;/h4&gt;

&lt;p&gt;a. 进入阿里云&lt;a href=&quot;https://www.aliyun.com/&quot;&gt;https://www.aliyun.com/&lt;/a&gt;够买个人域名，比如我的：www.chenjianhui.org&lt;/p&gt;

&lt;p&gt;b. 对域名进行DNS解析。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://p96hyfqf4.bkt.clouddn.com/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c. 进入个人github-&amp;gt;Settings&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://p96hyfqf4.bkt.clouddn.com/github%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-云存储托管博客图片&quot;&gt;2. 云存储托管博客图片&lt;/h4&gt;

&lt;p&gt;在非自己搭的博客如csdn中，如果想在文章中插入一张图片，其实是非常简单的，只要从你本机进行图片选择，然后选择上传，图片就会上传到CSDN的服务器，
到时候在文章显示的时候就会读取该图片。但是如果是在自己的搭建的网站中要进行图片的显示就会遇到问题，因为图片无法从你本机读取，除非你的
本机是一台服务器。所以我们要选择一个专门存储图片的服务商，同时存储的图片还能进行外链，即获得图片的URL地址，到时候就可以通过该URL访问并
显示这张图片。我这边使用的图片存储商是七牛云存储，这是一个免费的存储空间。&lt;/p&gt;

&lt;p&gt;简要描述下步骤：&lt;/p&gt;

&lt;p&gt;a. 进入七牛云存储官网&lt;a href=&quot;https://www.qiniu.com]&quot;&gt;https://www.qiniu.com&lt;/a&gt;登陆注册。新建一个空间。&lt;/p&gt;

&lt;p&gt;b. 然后在内容管理中上传一张图片，点击该图片，即可获得该图片的外链地址。然后复制即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://p96hyfqf4.bkt.clouddn.com/%E4%B8%83%E7%89%9B%E4%BA%91.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c. 然后在新建的博客中进行访问，由于博客使用markdown语法进行编辑的，所以要使用以下语法访问这张图片的URL地址。
我在Markdown中的格式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://p96hyfqf4.bkt.clouddn.com/%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E5%A4%96%E9%93%BE.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后注意事项&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;git只允许每个人有一个以用户名.github.io命名的仓库，例如，我的用户是bitchenjh, 那么我的唯一对应主页应该是
  bitchenjh.github.io, 仓库名也必须命名为bitchenjh.github.io。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Domain’s DNS record could not be retrieved问题，说明你的域名云解析有问题，你去阿里云上仔细核对你的独立域名，
最好设置同时添加’www’及’@’记录，这样访问博客更加方便。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 10 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/10/buildblog-interview0/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/10/buildblog-interview0/</guid>
        
        <category>博客</category>
        
        
      </item>
    
  </channel>
</rss>
